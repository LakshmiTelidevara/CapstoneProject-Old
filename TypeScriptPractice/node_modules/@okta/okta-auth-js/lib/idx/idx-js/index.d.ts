/*!
 * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
declare const _default: {
    start: ({ withCredentials, clientId, domain, issuer, stateHandle, interactionHandle, version, redirectUri, state, scopes, codeChallenge, codeChallengeMethod, activationToken, recoveryToken }: {
        withCredentials: any;
        clientId: any;
        domain: any;
        issuer: any;
        stateHandle: any;
        interactionHandle: any;
        version: any;
        redirectUri: any;
        state: any;
        scopes: any;
        codeChallenge: any;
        codeChallengeMethod: any;
        activationToken: any;
        recoveryToken: any;
    }) => Promise<import("../types/idx-js").IdxResponse>;
    introspect: ({ withCredentials, domain, interactionHandle, stateHandle, version, }: import("./introspect").IntrospectOptions) => Promise<any>;
    interact: ({ withCredentials, clientId, baseUrl, scopes, redirectUri, codeChallenge, codeChallengeMethod, state, activationToken, recoveryToken, clientSecret, }: {
        withCredentials: any;
        clientId: any;
        baseUrl: any;
        scopes?: string[] | undefined;
        redirectUri: any;
        codeChallenge: any;
        codeChallengeMethod: any;
        state: any;
        activationToken: any;
        recoveryToken: any;
        clientSecret: any;
    }) => Promise<any>;
    makeIdxState: typeof import("./v1/makeIdxState").makeIdxState;
    client: {
        interceptors: {
            request: import("./client").Interceptor;
        };
    };
    LATEST_SUPPORTED_IDX_API_VERSION: string;
};
export default _default;
