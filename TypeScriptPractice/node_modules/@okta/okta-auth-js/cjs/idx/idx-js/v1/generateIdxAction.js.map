{"version":3,"sources":["../../../../../lib/idx/idx-js/v1/generateIdxAction.ts"],"names":["generateDirectFetch","actionDefinition","defaultParamsForAction","immutableParamsForAction","toPersist","target","href","params","headers","accepts","body","credentials","withCredentials","method","then","response","respJson","json","ok","status","get","err","ms","stepUp","reject","idxResponse","generateIdxAction","generator","defaultParams","neededParams","immutableParams","action","name"],"mappings":";;;;;;;;;;AAcA;;AACA;;AACA;;AAhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAKA,MAAMA,mBAAmB,GAAG,SAASA,mBAAT,CAA6B;AACvDC,EAAAA,gBADuD;AAEvDC,EAAAA,sBAAsB,GAAG,EAF8B;AAGvDC,EAAAA,wBAAwB,GAAG,EAH4B;AAIvDC,EAAAA;AAJuD,CAA7B,EAKzB;AACD,QAAMC,MAAM,GAAGJ,gBAAgB,CAACK,IAAhC;AACA,SAAO,gBAAeC,MAAf,EAAuB;AAC5B,UAAMC,OAAO,GAAG;AACd,sBAAgB,kBADF;AAEd,gBAAUP,gBAAgB,CAACQ,OAAjB,IAA4B;AAFxB,KAAhB;AAIA,UAAMC,IAAI,GAAG,wBAAe,EAC1B,GAAGR,sBADuB;AAE1B,SAAGK,MAFuB;AAG1B,SAAGJ;AAHuB,KAAf,CAAb;AAKA,UAAMQ,WAAW,GAAGP,SAAS,IAAIA,SAAS,CAACQ,eAAV,KAA8B,KAA3C,GAAmD,MAAnD,GAA4D,SAAhF;AACA,WAAO,qBAAQP,MAAR,EAAgB;AAAEQ,MAAAA,MAAM,EAAEZ,gBAAgB,CAACY,MAA3B;AAAmCL,MAAAA,OAAnC;AAA4CE,MAAAA,IAA5C;AAAkDC,MAAAA;AAAlD,KAAhB,EACJG,IADI,CACEC,QAAQ,IAAI;AACjB,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAT,EAAjB;;AACA,UAAIF,QAAQ,CAACG,EAAb,EAAiB;AACf,eAAOF,QAAP;AACD,OAFD,MAEO,IAAID,QAAQ,CAACI,MAAT,KAAoB,GAApB,IAA2BJ,QAAQ,CAACP,OAAT,CAAiBY,GAAjB,CAAqB,kBAArB,MAA6C,mCAA5E,EAAiH;AACtH;AACA;AACA;AACA;AACA;AACA,eAAOJ,QAAQ,CAACF,IAAT,CAAcO,GAAG,IAAI;AAC1B,cAAIC,EAAE,GAAG,gCAAaD,GAAb,EAAkBjB,SAAlB,CAAT,CAD0B,CAE1B;;AACAkB,UAAAA,EAAE,CAACC,MAAH,GAAY,IAAZ;AACA,iBAAO,iBAAQC,MAAR,CAAeF,EAAf,CAAP;AACD,SALM,CAAP;AAMD;;AACD,aAAON,QAAQ,CAACF,IAAT,CAAcO,GAAG,IAAI;AAC1B,eAAO,iBAAQG,MAAR,CAAe,gCAAaH,GAAb,EAAkBjB,SAAlB,CAAf,CAAP;AACD,OAFM,CAAP;AAGD,KArBI,EAsBJU,IAtBI,CAsBEW,WAAW,IAAI,gCAAaA,WAAb,EAA0BrB,SAA1B,CAtBjB,CAAP;AAuBD,GAlCD;AAmCD,CA1CD,C,CA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMsB,iBAAiB,GAAG,SAASA,iBAAT,CAA4BzB,gBAA5B,EAA8CG,SAA9C,EAA0D;AAClF;AACA;AACA,QAAMuB,SAAS,GAAG3B,mBAAlB;AACA,QAAM;AAAE4B,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA;AAA/B,MAAmD,kDAAgC7B,gBAAhC,CAAzD;AAEA,QAAM8B,MAAM,GAAGJ,SAAS,CAAE;AACxB1B,IAAAA,gBADwB;AAExBC,IAAAA,sBAAsB,EAAE0B,aAAa,CAAC3B,gBAAgB,CAAC+B,IAAlB,CAFb;AAGxB7B,IAAAA,wBAAwB,EAAE2B,eAAe,CAAC7B,gBAAgB,CAAC+B,IAAlB,CAHjB;AAIxB5B,IAAAA;AAJwB,GAAF,CAAxB;AAMA2B,EAAAA,MAAM,CAACF,YAAP,GAAsBA,YAAtB;AACA,SAAOE,MAAP;AACD,CAdD;;eAgBeL,iB","sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable max-len */\n// @ts-nocheck\nimport { request } from '../client';\nimport { divideActionParamsByMutability } from './actionParser';\nimport { makeIdxState } from './makeIdxState';\n\nconst generateDirectFetch = function generateDirectFetch({ \n  actionDefinition, \n  defaultParamsForAction = {}, \n  immutableParamsForAction = {}, \n  toPersist \n}) {\n  const target = actionDefinition.href;\n  return async function(params) {\n    const headers = {\n      'content-type': 'application/json',\n      'accept': actionDefinition.accepts || 'application/ion+json',\n    };\n    const body = JSON.stringify({\n      ...defaultParamsForAction,\n      ...params,\n      ...immutableParamsForAction\n    });\n    const credentials = toPersist && toPersist.withCredentials === false ? 'omit' : 'include';\n    return request(target, { method: actionDefinition.method, headers, body, credentials })\n      .then( response => {\n        const respJson = response.json();\n        if (response.ok) {\n          return respJson;\n        } else if (response.status === 401 && response.headers.get('WWW-Authenticate') === 'Oktadevicejwt realm=\"Okta Device\"') {\n          // Okta server responds 401 status code with WWW-Authenticate header and new remediation\n          // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n          // the response reaches here when Okta Verify is not installed\n          // we need to return an idx object so that\n          // the SIW can proceed to the next step without showing error\n          return respJson.then(err => {\n            let ms = makeIdxState(err, toPersist);\n            // set to true if flow should be continued without showing any errors\n            ms.stepUp = true;\n            return Promise.reject(ms);\n          });\n        }\n        return respJson.then(err => {\n          return Promise.reject(makeIdxState(err, toPersist));\n        });\n      })\n      .then( idxResponse => makeIdxState(idxResponse, toPersist) );\n  };\n};\n\n// TODO: Resolve in M2: Either build the final polling solution or remove this code\n// const generatePollingFetch = function generatePollingFetch( { actionDefinition, defaultParamsForAction = {}, immutableParamsForAction = {} } ) {\n//   // TODO: Discussions ongoing about when/how to terminate polling: OKTA-246581\n//   const target = actionDefinition.href;\n//   return async function(params) {\n//     return fetch(target, {\n//       method: actionDefinition.method,\n//       headers: {\n//         'content-type': actionDefinition.accepts,\n//       },\n//       body: JSON.stringify({ ...defaultParamsForAction, ...params, ...immutableParamsForAction })\n//     })\n//       .then( response => response.ok ? response.json() : response.json().then( err => Promise.reject(err)) )\n//       .then( idxResponse => makeIdxState(idxResponse) );\n//   };\n// };\n\nconst generateIdxAction = function generateIdxAction( actionDefinition, toPersist ) {\n  // TODO: leaving this here to see where the polling is EXPECTED to drop into the code, but removing any accidental trigger of incomplete code\n  // const generator =  actionDefinition.refresh ? generatePollingFetch : generateDirectFetch;\n  const generator = generateDirectFetch;\n  const { defaultParams, neededParams, immutableParams } = divideActionParamsByMutability( actionDefinition );\n\n  const action = generator( {\n    actionDefinition,\n    defaultParamsForAction: defaultParams[actionDefinition.name],\n    immutableParamsForAction: immutableParams[actionDefinition.name],\n    toPersist\n  });\n  action.neededParams = neededParams;\n  return action;\n};\n\nexport default generateIdxAction;\n"],"file":"generateIdxAction.js"}