{"version":3,"sources":["../../../lib/idx/remediate.ts"],"names":["getRemediator","idxRemediations","values","options","remediators","remediator","step","remediation","name","T","remediatorCandidates","isRemeditionInFlow","canRemediate","push","isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","canResendFn","actions","actionName","getIdxMessages","messages","rawIdxState","globalMessages","value","message","fieldMessages","Remediator","getMessages","getNextStep","nextStep","context","canSkip","canResend","handleIdxError","e","idxState","terminal","getActionFromValues","action","resend","removeActionFromValues","undefined","remediate","flow","actionFromValues","valuesWithoutExecutedAction","canceled","remediationAction","proceed","AuthSdkError","acc","curr","getName","data","getData","getValuesAfterProceed"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, max-depth, complexity */\nimport { AuthSdkError } from '../errors';\nimport { Remediator, RemediationValues } from './remediators';\nimport { NextStep, IdxMessage, FlowIdentifier } from './types';\nimport { RemediationFlow } from './flow';\nimport { \n  IdxResponse,  \n  IdxRemediation,\n  isIdxResponse, \n} from './types/idx-js';\n\ninterface RemediationResponse {\n  idxResponse?: IdxResponse;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  terminal?: boolean;\n  canceled?: boolean;\n}\nexport interface RemediateOptions {\n  remediators?: RemediationFlow;\n  actions?: string[];\n  flow?: FlowIdentifier;\n  step?: string;\n}\n\n// Return first match idxRemediation in allowed remediators\nexport function getRemediator(\n  idxRemediations: IdxRemediation[],\n  values: RemediationValues,\n  options: RemediateOptions,\n): Remediator {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const remediators = options.remediators!;\n\n  let remediator;\n  // remediation name specified by caller - fast-track remediator lookup \n  if (options.step) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediation = idxRemediations.find(({ name }) => name === options.step)!;\n    const T = remediators[remediation.name];\n    return new T(remediation, values);\n  }\n\n  const remediatorCandidates = [];\n  for (let remediation of idxRemediations) {\n    const isRemeditionInFlow = Object.keys(remediators as object).includes(remediation.name);\n    if (!isRemeditionInFlow) {\n      continue;\n    }\n\n    const T = remediators[remediation.name];\n    remediator = new T(remediation, values);\n    if (remediator.canRemediate()) {\n      // found the remediator\n      return remediator;\n    }\n    // remediator cannot handle the current values\n    // maybe return for next step\n    remediatorCandidates.push(remediator as never);  \n  }\n  \n  return remediatorCandidates[0];\n}\n\nfunction isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nfunction canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nfunction canResendFn(idxResponse: IdxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nfunction getIdxMessages(idxResponse: IdxResponse): IdxMessage[] {\n  let messages = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages] as never;\n  }\n\n  // Handle field messages for current flow\n  for (let remediation of neededToProceed) {\n    const fieldMessages = Remediator.getMessages(remediation);\n    if (fieldMessages) {\n      messages = [...messages, ...fieldMessages] as never;\n    }\n  }\n\n  return messages;\n}\n\nfunction getNextStep(\n  remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep(idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return {\n    ...nextStep,\n    ...(canSkip && {canSkip}),\n    ...(canResend && {canResend}),\n  };\n}\n\nfunction handleIdxError(e, remediator?) {\n  // Handle idx messages\n  const idxState = isIdxResponse(e) ? e : null;\n  if (!idxState) {\n    // Thrown error terminates the interaction with idx\n    throw e;\n  }\n  const terminal = isTerminalResponse(idxState);\n  const messages = getIdxMessages(idxState);\n  if (terminal) {\n    return { terminal, messages };\n  } else {\n    const nextStep = remediator && getNextStep(remediator, idxState);\n    return { \n      messages, \n      ...(nextStep && { nextStep }) \n    };\n  }\n}\n\nfunction getActionFromValues(values, idxResponse: IdxResponse): string | undefined {\n  // Currently support resend actions only\n  return Object.keys(idxResponse.actions).find(action => !!values.resend && action.includes('-resend'));\n}\n\nfunction removeActionFromValues(values) {\n  // Currently support resend actions only\n  values.resend = undefined;\n  return values;\n}\n\n// This function is called recursively until it reaches success or cannot be remediated\nexport async function remediate(\n  idxResponse: IdxResponse,\n  values: RemediationValues,\n  options: RemediateOptions\n): Promise<RemediationResponse> {\n  let { neededToProceed, interactionCode } = idxResponse;\n  const { remediators, flow } = options;\n\n  // If the response contains an interaction code, there is no need to remediate\n  if (interactionCode) {\n    return { idxResponse };\n  }\n\n  // Reach to terminal state\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getIdxMessages(idxResponse);\n  if (terminal) {\n    return { terminal, messages };\n  }\n  \n  // Try actions in idxResponse first\n  const actionFromValues = getActionFromValues(values, idxResponse);\n  const actions = [\n    ...options.actions || [],\n    ...(actionFromValues && [actionFromValues] || []),\n  ];\n  if (actions) {\n    for (let action of actions) {\n      let valuesWithoutExecutedAction = removeActionFromValues(values);\n      if (typeof idxResponse.actions[action] === 'function') {\n        try {\n          idxResponse = await idxResponse.actions[action]();\n        } catch (e) {\n          return handleIdxError(e, remediators);\n        }\n        if (action === 'cancel') {\n          return { canceled: true };\n        }\n        return remediate(idxResponse, valuesWithoutExecutedAction, options); // recursive call\n      }\n\n      // search for action in remediation list\n      const remediationAction = neededToProceed.find(({ name }) => name === action);\n      if (remediationAction) {\n        try {\n          idxResponse = await idxResponse.proceed(action, {});\n        }\n        catch (e) {\n          return handleIdxError(e, remediators);\n        }\n\n        return remediate(idxResponse, values, options); // recursive call\n      }\n    }\n  }\n\n  const remediator = getRemediator(neededToProceed, values, options);\n  if (!remediator && flow === 'default') {\n    return { idxResponse };\n  }\n\n  if (!remediator) {\n    throw new AuthSdkError(`\n      No remediation can match current flow, check policy settings in your org.\n      Remediations: [${neededToProceed.reduce((acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]\n    `);\n  }\n\n  if (messages.length) {\n    const nextStep = getNextStep(remediator, idxResponse);\n    return { nextStep, messages };\n  }\n\n  // Return next step to the caller\n  if (!remediator.canRemediate()) {\n    const nextStep = getNextStep(remediator, idxResponse);\n    return { idxResponse, nextStep };\n  }\n\n  const name = remediator.getName();\n  const data = remediator.getData();\n  try {\n    idxResponse = await idxResponse.proceed(name, data);\n\n    // We may want to trim the values bag for the next remediation\n    // Let the remediator decide what the values should be (default to current values)\n    values = remediator.getValuesAfterProceed();\n    return remediate(idxResponse, values, options); // recursive call\n  } catch (e) {\n    return handleIdxError(e, remediator);\n  }\n}\n"],"file":"remediate.js"}