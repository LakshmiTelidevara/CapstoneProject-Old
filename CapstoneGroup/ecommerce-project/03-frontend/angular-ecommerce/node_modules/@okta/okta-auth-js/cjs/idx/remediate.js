"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

exports.getRemediator = getRemediator;
exports.remediate = remediate;

var _find = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/find"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/keys"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

var _errors = require("../errors");

var _remediators = require("./remediators");

var _idxJs = require("./types/idx-js");

/*!
 * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * 
 * See the License for the specific language governing permissions and limitations under the License.
 */

/* eslint-disable max-statements, max-depth, complexity */
// Return first match idxRemediation in allowed remediators
function getRemediator(idxRemediations, values, options) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  const remediators = options.remediators;
  let remediator; // remediation name specified by caller - fast-track remediator lookup 

  if (options.step) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const remediation = (0, _find.default)(idxRemediations).call(idxRemediations, ({
      name
    }) => name === options.step);
    const T = remediators[remediation.name];
    return new T(remediation, values);
  }

  const remediatorCandidates = [];

  for (let remediation of idxRemediations) {
    var _context;

    const isRemeditionInFlow = (0, _includes.default)(_context = (0, _keys.default)(remediators)).call(_context, remediation.name);

    if (!isRemeditionInFlow) {
      continue;
    }

    const T = remediators[remediation.name];
    remediator = new T(remediation, values);

    if (remediator.canRemediate()) {
      // found the remediator
      return remediator;
    } // remediator cannot handle the current values
    // maybe return for next step


    remediatorCandidates.push(remediator);
  }

  return remediatorCandidates[0];
}

function isTerminalResponse(idxResponse) {
  const {
    neededToProceed,
    interactionCode
  } = idxResponse;
  return !neededToProceed.length && !interactionCode;
}

function canSkipFn(idxResponse) {
  return idxResponse.neededToProceed.some(({
    name
  }) => name === 'skip');
}

function canResendFn(idxResponse) {
  return (0, _keys.default)(idxResponse.actions).some(actionName => (0, _includes.default)(actionName).call(actionName, 'resend'));
}

function getIdxMessages(idxResponse) {
  var _rawIdxState$messages, _context2;

  let messages = [];
  const {
    rawIdxState,
    neededToProceed
  } = idxResponse; // Handle global messages

  const globalMessages = (_rawIdxState$messages = rawIdxState.messages) === null || _rawIdxState$messages === void 0 ? void 0 : (0, _map.default)(_context2 = _rawIdxState$messages.value).call(_context2, message => message);

  if (globalMessages) {
    messages = [...messages, ...globalMessages];
  } // Handle field messages for current flow


  for (let remediation of neededToProceed) {
    const fieldMessages = _remediators.Remediator.getMessages(remediation);

    if (fieldMessages) {
      messages = [...messages, ...fieldMessages];
    }
  }

  return messages;
}

function getNextStep(remediator, idxResponse) {
  const nextStep = remediator.getNextStep(idxResponse.context);
  const canSkip = canSkipFn(idxResponse);
  const canResend = canResendFn(idxResponse);
  return { ...nextStep,
    ...(canSkip && {
      canSkip
    }),
    ...(canResend && {
      canResend
    })
  };
}

function handleIdxError(e, remediator) {
  // Handle idx messages
  const idxState = (0, _idxJs.isIdxResponse)(e) ? e : null;

  if (!idxState) {
    // Thrown error terminates the interaction with idx
    throw e;
  }

  const terminal = isTerminalResponse(idxState);
  const messages = getIdxMessages(idxState);

  if (terminal) {
    return {
      terminal,
      messages
    };
  } else {
    const nextStep = remediator && getNextStep(remediator, idxState);
    return {
      messages,
      ...(nextStep && {
        nextStep
      })
    };
  }
}

function getActionFromValues(values, idxResponse) {
  var _context3;

  // Currently support resend actions only
  return (0, _find.default)(_context3 = (0, _keys.default)(idxResponse.actions)).call(_context3, action => !!values.resend && (0, _includes.default)(action).call(action, '-resend'));
}

function removeActionFromValues(values) {
  // Currently support resend actions only
  values.resend = undefined;
  return values;
} // This function is called recursively until it reaches success or cannot be remediated


async function remediate(idxResponse, values, options) {
  let {
    neededToProceed,
    interactionCode
  } = idxResponse;
  const {
    remediators,
    flow
  } = options; // If the response contains an interaction code, there is no need to remediate

  if (interactionCode) {
    return {
      idxResponse
    };
  } // Reach to terminal state


  const terminal = isTerminalResponse(idxResponse);
  const messages = getIdxMessages(idxResponse);

  if (terminal) {
    return {
      terminal,
      messages
    };
  } // Try actions in idxResponse first


  const actionFromValues = getActionFromValues(values, idxResponse);
  const actions = [...(options.actions || []), ...(actionFromValues && [actionFromValues] || [])];

  if (actions) {
    for (let action of actions) {
      let valuesWithoutExecutedAction = removeActionFromValues(values);

      if (typeof idxResponse.actions[action] === 'function') {
        try {
          idxResponse = await idxResponse.actions[action]();
        } catch (e) {
          return handleIdxError(e, remediators);
        }

        if (action === 'cancel') {
          return {
            canceled: true
          };
        }

        return remediate(idxResponse, valuesWithoutExecutedAction, options); // recursive call
      } // search for action in remediation list


      const remediationAction = (0, _find.default)(neededToProceed).call(neededToProceed, ({
        name
      }) => name === action);

      if (remediationAction) {
        try {
          idxResponse = await idxResponse.proceed(action, {});
        } catch (e) {
          return handleIdxError(e, remediators);
        }

        return remediate(idxResponse, values, options); // recursive call
      }
    }
  }

  const remediator = getRemediator(neededToProceed, values, options);

  if (!remediator && flow === 'default') {
    return {
      idxResponse
    };
  }

  if (!remediator) {
    throw new _errors.AuthSdkError(`
      No remediation can match current flow, check policy settings in your org.
      Remediations: [${(0, _reduce.default)(neededToProceed).call(neededToProceed, (acc, curr) => acc ? acc + ' ,' + curr.name : curr.name, '')}]
    `);
  }

  if (messages.length) {
    const nextStep = getNextStep(remediator, idxResponse);
    return {
      nextStep,
      messages
    };
  } // Return next step to the caller


  if (!remediator.canRemediate()) {
    const nextStep = getNextStep(remediator, idxResponse);
    return {
      idxResponse,
      nextStep
    };
  }

  const name = remediator.getName();
  const data = remediator.getData();

  try {
    idxResponse = await idxResponse.proceed(name, data); // We may want to trim the values bag for the next remediation
    // Let the remediator decide what the values should be (default to current values)

    values = remediator.getValuesAfterProceed();
    return remediate(idxResponse, values, options); // recursive call
  } catch (e) {
    return handleIdxError(e, remediator);
  }
}
//# sourceMappingURL=remediate.js.map