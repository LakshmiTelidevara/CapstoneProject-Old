{"version":3,"sources":["../../../../lib/idx/idx-js/index.ts"],"names":["LATEST_SUPPORTED_IDX_API_VERSION","start","withCredentials","clientId","domain","issuer","stateHandle","interactionHandle","version","redirectUri","state","scopes","codeChallenge","codeChallengeMethod","activationToken","recoveryToken","replace","baseUrl","toPersist","reject","error","origin","interactParams","interaction_handle","makeIdxState","idxResponse","catch","err","details","idxState","introspect","interact","client","HttpClient"],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable complexity, max-statements, max-len, camelcase */\n// @ts-nocheck\nimport introspect from './introspect';\nimport interact from './interact';\nimport parsersForVersion from './parsers';\nimport { HttpClient } from './client';\nimport { validateVersionConfig } from './util';\n\nconst LATEST_SUPPORTED_IDX_API_VERSION = '1.0.0';\n\nconst start = async function start({\n  withCredentials,\n  clientId,\n  domain,\n  issuer,\n  stateHandle,\n  interactionHandle,\n  version,\n  redirectUri,\n  state,\n  scopes,\n  codeChallenge,\n  codeChallengeMethod,\n  activationToken,\n  recoveryToken\n}) {\n\n  issuer = issuer?.replace(/\\/+$/, '');\n  const baseUrl = issuer?.indexOf('/oauth2') > 0 ? issuer : issuer + '/oauth2'; // org AS uses domain as AS, but we need the base url for calls\n  const toPersist = {\n    baseUrl,\n    clientId,\n    state,\n    withCredentials\n  };\n\n  if ( !domain && !issuer) {\n    return Promise.reject({ error: 'issuer is required' });\n  }\n\n  if ( !stateHandle && !clientId ) { // redirectUri is only required on self-hosted flow\n    return Promise.reject({ error: 'clientId is required' });\n  }\n\n  if ( !stateHandle && !redirectUri ) { // redirectUri is only required on self-hosted flow\n    return Promise.reject({ error: 'redirectUri is required' });\n  }\n\n  if (!stateHandle && !(codeChallenge && codeChallengeMethod)) {\n    return Promise.reject({ error: 'PKCE params (codeChallenge, codeChallengeMethod) are required' });\n  }\n\n  if ( !domain ) {\n    domain = new URL(issuer).origin;\n  }\n\n  validateVersionConfig(version);\n\n  if ( !stateHandle && !interactionHandle ) { // start a new transaction\n    try {\n      const interactParams = {\n        withCredentials,\n        clientId,\n        baseUrl,\n        scopes,\n        redirectUri,\n        codeChallenge,\n        codeChallengeMethod,\n        state,\n        activationToken,\n        recoveryToken\n      };\n\n      const interaction_handle = await interact( interactParams );\n      interactionHandle = interaction_handle;\n      toPersist.interactionHandle = interactionHandle;\n    } catch (error) {\n      return Promise.reject({ error });\n    }\n  }\n\n  try {\n    const { makeIdxState } = parsersForVersion(version);\n    const idxResponse = await introspect({ withCredentials, domain, interactionHandle, stateHandle, version })\n      .catch( err => Promise.reject({\n        error: 'introspect call failed',\n        // Transform all errors into an IdX State object.\n        // This allows IdX based errors (messages) to optionally proceed with remediation forms\n        details: makeIdxState( err, toPersist )\n      }) );\n    const idxState = makeIdxState( idxResponse, toPersist );\n    return idxState;\n  } catch (error) {\n    return Promise.reject({ error });\n  }\n};\nconst { makeIdxState } = parsersForVersion(LATEST_SUPPORTED_IDX_API_VERSION);\n\nexport default {\n  start,\n  introspect,\n  interact,\n  makeIdxState,\n  client: HttpClient,\n  LATEST_SUPPORTED_IDX_API_VERSION,\n};\n"],"file":"index.js"}