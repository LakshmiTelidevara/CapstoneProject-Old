{"version":3,"sources":["../../../../lib/idx/idx-js/client.ts"],"names":["Interceptor","use","before","handlers","push","clear","HttpClient","interceptors","request","target","method","headers","credentials","body","requestOptions","url","forEach","interceptor"],"mappings":";;;;;;;;AAaA;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACO,MAAMA,WAAN,CAAkB;AAAA;AAAA,oDACZ,EADY;AAAA;;AAGvB;AACAC,EAAAA,GAAG,CAACC,MAAD,EAAS;AACV,SAAKC,QAAL,CAAcC,IAAd,CAAmB;AACjBF,MAAAA;AADiB,KAAnB;AAGD,GARsB,CAUvB;;;AACAG,EAAAA,KAAK,GAAG;AACN,SAAKF,QAAL,GAAgB,EAAhB;AACD;;AAbsB;AAgBzB;AACA;AACA;AACA;AACA;AACA;;;;AACO,MAAMG,UAAU,GAAG;AACxBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,IAAIR,WAAJ;AADG;AADU,CAAnB;;;AAMA,MAAMQ,OAAO,GAAG,OACrBC,MADqB,EAErB;AACEC,EAAAA,MAAM,GAAG,MADX;AAEEC,EAAAA,OAAO,GAAG,EAFZ;AAGEC,EAAAA,WAAW,GAAG,SAHhB;AAIEC,EAAAA;AAJF,CAFqB,KAQlB;AACH,QAAMC,cAAc,GAAG;AACrBC,IAAAA,GAAG,EAAEN,MADgB;AAErBC,IAAAA,MAFqB;AAGrBC,IAAAA,OAAO,EAAE,EACP,GAAGA;AADI,KAHY;AAMrBC,IAAAA,WANqB;AAOrBC,IAAAA;AAPqB,GAAvB;;AAUA,MAAIP,UAAU,CAACC,YAAf,EAA6B;AAC3BD,IAAAA,UAAU,CAACC,YAAX,CAAwBC,OAAxB,CAAgCL,QAAhC,CAAyCa,OAAzC,CAAkDC,WAAW,IAAI;AAC/DA,MAAAA,WAAW,CAACf,MAAZ,CAAmBY,cAAnB;AACD,KAFD;AAGD,GAfE,CAiBH;;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUD,cAAhB;AACA,SAAOA,cAAc,CAACC,GAAtB;AAEA,SAAO,yBAAOA,GAAP,EAAYD,cAAZ,CAAP;AACD,CA9BM","sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// @ts-nocheck\nimport fetch from 'cross-fetch';\n\n/**\n * Reusable interceptor interface\n */\nexport class Interceptor {\n  handlers = [];\n\n  // Adds a new interceptor to our HttpClient\n  use(before) {\n    this.handlers.push({\n      before,\n    });\n  }\n\n  // Clears all interceptors\n  clear() {\n    this.handlers = [];\n  }\n}\n\n/**\n * Singleton instance of the IdX HTTP Client\n *\n * Invoke the `use` method to add a new interceptor:\n *   - client.interceptors.request.use((requestConfig) => { some logic });\n */\nexport const HttpClient = {\n  interceptors: {\n    request: new Interceptor(),\n  },\n};\n\nexport const request = async (\n  target, \n  { \n    method = 'POST', \n    headers = {}, \n    credentials = 'include', \n    body \n  }\n) => {\n  const requestOptions = {\n    url: target,\n    method,\n    headers: {\n      ...headers,\n    },\n    credentials,\n    body,\n  };\n\n  if (HttpClient.interceptors) {\n    HttpClient.interceptors.request.handlers.forEach( interceptor => {\n      interceptor.before(requestOptions);\n    });\n  }\n\n  // Extract the URL to adhere to the fetch API\n  const { url } = requestOptions;\n  delete requestOptions.url;\n\n  return fetch( url, requestOptions );\n};\n"],"file":"client.js"}